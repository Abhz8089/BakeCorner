<body>
  <style>
    body {
      background-image: url(/public/project-images/back1.jpg);

    }

    .row {
      opacity: 0;
      transform: scale(0.5);
      animation: fadeInScale 0.5s ease-in-out forwards;
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: scale(0.5);
      }

      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    .row {
      margin-right: auto;
    }

    .product-grid {
      font-family: 'Poppins', sans-serif;
      text-align: center;
      border-radius: 15px;
      border: 1px solid #e7e7e7;
      overflow: hidden;
      transition: all 0.4s ease-out;
    }

    .product-grid:hover {
      box-shadow: 5px 10px 30px rgba(0, 0, 0, 0.1);
    }

    .product-grid .product-image {
      position: relative;
    }

    .product-grid .product-image a.image {
      display: block;
    }

    .product-grid .product-image img {
      width: 100%;
      height: auto;
    }

    .product-grid .product-discount-label {
      color: #fff;
      background: #78a206;
      font-size: 14px;
      font-weight: 400;
      text-transform: uppercase;
      padding: 2px 8px;
      border-radius: 5px;
      position: absolute;
      top: 12px;
      left: 12px;
    }

    .product-grid .product-links {
      width: 145px;
      padding: 0;
      margin: 0;
      list-style: none;
      opacity: 0;
      transform: translateX(-50%) translateY(-50%);
      position: absolute;
      top: 65%;
      left: 50%;
      transition: all 0.4s ease 0s;
    }

    .product-grid:hover .product-links {
      opacity: 1;
      top: 50%;
    }

    .product-grid .product-links li {
      display: inline-block;
      margin: 0 2px;
    }

    .product-grid .product-links li a {
      color: #2c2c2c;
      background: #fff;
      font-size: 16px;
      line-height: 42px;
      width: 40px;
      height: 40px;
      border-radius: 50px;
      display: block;
      position: relative;
      transition: all 0.4s ease-out 0s;
    }

    .product-grid .product-links li a:hover {
      color: #fff;
      background: #78a206;
      box-shadow: 1px 1px 30px 0 rgba(0, 0, 0, 0.2);
    }

    .product-grid .product-links li a:before,
    .product-grid .product-links li a:after {
      content: attr(data-tip);
      color: #fff;
      background-color: #555;
      font-size: 12px;
      line-height: 18px;
      padding: 5px 10px;
      white-space: nowrap;
      display: none;
      transform: translateX(-50%);
      position: absolute;
      left: 50%;
      top: -40px;
      transition: all 0.3s ease 0s;
    }

    .product-grid .product-links li a:after {
      content: '';
      height: 10px;
      width: 10px;
      padding: 0;
      transform: translateX(-50%) rotate(45deg);
      top: -18px;
      z-index: -1;
    }

    .product-grid .product-links li a:hover:before,
    .product-grid .product-links li a:hover:after {
      display: block;
    }

    .product-grid .product-content {
      padding: 12px 12px 15px;
      position: relative;
    }

    .product-grid .rating {
      padding: 0;
      margin: 0 0 8px;
      list-style: none;
    }

    .product-grid .rating li {
      color: #78a206;
      font-size: 14px;
    }

    .product-grid .rating .far {
      color: #808080;
    }

    .product-grid .title {
      font-size: 18px;
      font-weight: 600;
      text-transform: uppercase;
      margin: 0 0 15px;
    }

    .product-grid .title a {
      color: #2c2c2c;
      transition: all 0.3s ease 0s;
    }

    .product-grid .title a:hover {
      color: #78a206;
    }

    .product-grid .price {
      color: #78a206;
      font-size: 17px;
      font-weight: 600;
      display: block;
      transition: all 0.4s ease-in-out;
    }

    .product-grid .price span {
      color: #999;
      font-weight: 500;
      text-decoration: line-through;
    }

    .product-grid:hover .price {
      opacity: 0;
    }

    .product-grid .buy-now {
      color: #fff;
      background-color: #78a206;
      font-size: 16px;
      font-weight: 500;
      text-transform: uppercase;
      line-height: 40px;
      width: 140px;
      height: 40px;
      border-radius: 50px;
      opacity: 0;
      transform: translateX(-50%);
      position: absolute;
      bottom: 50px;
      left: 50%;
      transition: all .4s ease-out;
    }

    .product-grid .buy-now:hover {
      background-color: #2f2f2f;
    }

    .product-grid:hover .buy-now {
      opacity: 1;
      bottom: 8px;
    }

    @media screen and (max-width:1200px) {
      .product-grid {
        margin: 0 0 30px;
      }
    }

    .title {
      opacity: 0;
      transform: translateY(-20px);
      animation: slideInTitle 0.5s ease-in-out forwards;
    }

    @keyframes slideInTitle {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>

  <div class="title">
    {{#if (eq Cname "SNACKS")}}
    <h1 style="background-image: url(/public/project-images/title-pizza.jpg); margin-top: 73px; height: 5rem; text-align: center;  font-family: sofia, sans-serif;
  font-size: 50px; font-weight: 800;
      text-shadow: 3px 7px 7px #000000;
    color: #ffffff;">{{Cname}}</h1>
    {{else}}
    <h1 style="background-image: url(/public/project-images/title-3.jpg); margin-top: 73px; height: 5rem; text-align: center;  font-family: sofia, sans-serif;
  font-size: 50px; font-weight: 800;
  text-shadow: 3px 3px 3px #ababab;">{{Cname}}</h1>
    {{/if}}

  </div>
  <!-- Add search, sort, filter, and pagination controls below the product grid -->
  <div class="controls mt-5">
    <!-- Search -->
    <input type="text" id="cnameInput" value="{{Cname}}" hidden>
    <input type="text" id="searchInput" placeholder="Search..." />

    <!-- Sort -->



    <select id="sortSelect" onchange="performSort(this.value)">
      <option value="" selected disabled hidden>Sort By</option>
      <option value="priceLowToHigh">Price: Low to High</option>
      <option value="priceHighToLow">Price: High to Low</option>
      <option value="name">Name</option>
      <option value="rating">Rating</option>
    </select>


    <select id="priceFilterSelect" onchange="performSortAndFilter(sortSelect.value, cnameInput.value, this.value)">
      <option value="" selected disabled hidden>Price Filter</option>
      <option value="lt500">Under ₹500</option>
      <option value="lt1000">under ₹1000</option>
      <option value="1000To2000">₹1000 to ₹2000</option>
      <!-- Add more options for different price ranges as needed -->
    </select>


    {{!-- pagination --}}




    <div class="container">
      <div class="row"></div>



      <!-- Page information -->
      <div id="pageInfo"></div>
    </div>



    <div class="container mt-5">
        <div class="pagination">
  {{#if hasPrev}}
    <a href="?page={{prevPage}}" class="prev">Previous</a>
  {{/if}}
  {{#if hasNext}}
    <a href="?page={{nextPage}}" class="next">Next</a>
  {{/if}}
</div>

    </div>

</body>


<script>



  function updateProducts(products) {

    const productGrid = document.querySelector('.row');
    productGrid.innerHTML = '';

    // Check if products is an array or a single product object
    const productList = Array.isArray(products) ? products : JSON.parse(products);


    productList.forEach((product) => {
      const productHTML = `
      <div class="col-md-3 col-sm-6 mt-5">
        <div class="product-grid">
          <div class="product-image">
            <a href="#" class="image">
              <img class="pic-1" src="${product.photos && product.photos.length > 0 ? '/' + product.photos[0].fileName : ''}" width="200px" height="200px">
            </a>
            <span class="product-discount-label">-33%</span>
            <ul class="product-links">
              <li><a href="#" data-tip="Add to Wishlist"><i class="fas fa-heart"></i></a></li>
              <li><a href="#" data-tip="Add to Cart" onclick="addToCart('${product._id}')"><i class="fa fa-cart-arrow-down"></i></a></li>
              <li><a href="/view/${product._id}" data-tip="Quick View"><i class="fa fa-search"></i></a></li>
            </ul>
          </div>
          <div class="product-content">
            <ul class="rating">
              <li class="fas fa-star"></li>
              <li class="fas fa-star"></li>
              <li class="fas fa-star"></li>
              <li class="far fa-star"></li>
              <li class="far fa-star"></li>
            </ul>
            <h3 class="title">${product.name}</h3>
            <p>${product.description}</p>
            <div class="price"><span></span>₹${product.price}</div>
            <a class="buy-now" href="#">Buy Now</a>
          </div>
        </div>
      </div>
      

    `;

      productGrid.innerHTML += productHTML;

    });
   


  } 

$(document).ready(function() {
  const cnameInput = document.getElementById('cnameInput');
  const Cname = cnameInput.value; // Replace with the actual category name

  // Function to fetch and display all products
  function fetchProductsByPage(page,pageSize,Cname) {
    $.ajax({
      url: '/fetch-products',
      method: 'POST',
      data:  { Cname: Cname, page: page, pageSize: pageSize },
      success: function (response) {
           const products = response.Catproducts;
        const totalPages = response.totalPages;
        const currentPage = response.currentPage;

        // Update the products and pagination elements
        updateProducts(products);
        console.log('totalpage:',totalPages)
        console.log('currentpage:',currentPage)
        updatePagination(totalPages, currentPage);
      },
      error: function (xhr, status, error) {
        console.log(error); // Handle error response
      }
    });
  }

  // Call the fetchAllProducts function when the page is loaded
  const initialPage = 1;
  const pageSize = 10;
  fetchProductsByPage(initialPage, pageSize, Cname);

  
  // Update the pagination HTML elements
  function updatePagination(totalPages, currentPage) {
    console.log('totalpage:',totalPages)
    console.log('currentPag:',currentPage)
    const paginationContainer = document.querySelector('.pagination');
    paginationContainer.innerHTML = '';

    // Create previous button
    const previousButton = document.createElement('button');
    previousButton.innerText = 'Previous';
    previousButton.disabled = currentPage === 1;
    previousButton.addEventListener('click', () => {
      fetchProductsByPage(currentPage - 1, pageSize, Cname);
    });
    paginationContainer.appendChild(previousButton);

    // Create page number links
    for (let i = 1; i <= totalPages; i++) {
      const pageLink = document.createElement('a');
      pageLink.innerText = i;
      pageLink.classList.toggle('active', i === currentPage);
      pageLink.addEventListener('click', () => {
        fetchProductsByPage(i, pageSize, Cname);
      });
      paginationContainer.appendChild(pageLink);
    }

    // Create next button
    const nextButton = document.createElement('button');
    nextButton.innerText = 'Next';
    nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener('click', () => {
      console.log(currentPage+1)
      fetchProductsByPage(currentPage + 1, pageSize, Cname);
    });
    paginationContainer.appendChild(nextButton);
  }
})










  const cnameInput = document.getElementById('cnameInput');
  const searchInput = document.getElementById('searchInput');
  searchInput.addEventListener('input', (event) => {
    const searchQuery = event.target.value.trim();
    const Cname = cnameInput.value;
    performSearch(searchQuery, Cname);
  });






  function performSearch(searchQuery, Cname) {
   console.log("Search Query: ", searchQuery);
       $.ajax({
      url: '/search-product',
      method: 'POST',
      data: { searchQuery: searchQuery, Cname: Cname },
      success: function (response) {
        var products = response.Catproducts;

        updateProducts(products);
      },
      error: function (xhr, status, error) {
        console.log(error); // Handle error response
      }
    });
  }




  const sortSelect = document.getElementById('sortSelect');
  sortSelect.addEventListener('change', (event) => {
    const sortOption = event.target.value;
    const Cname = cnameInput.value;
    const filterOption = document.getElementById('priceFilterSelect').value;
    performSortAndFilter(sortOption, Cname, filterOption);
  });

  function performSortAndFilter(sortOption, Cname, filterOption) {
    const sortParams = {
      priceLowToHigh: 'price',
      priceHighToLow: '-price',
      name: 'name',
      rating: 'rating',
    };

    let minPrice, maxPrice;
    switch (filterOption) {
      case 'lt500':
        minPrice = 0;
        maxPrice = 500;
        break;
      case 'lt1000':
        minPrice = 0;
        maxPrice = 1000;
        break;
      case '1000To2000':
        minPrice = 1000;
        maxPrice = 2000;
        break;
      // Add more cases for different filter options as needed
      default:
        minPrice = undefined;
        maxPrice = undefined;
        break;
    }

    $.ajax({
      url: '/sort-and-filter-products',
      method: 'POST',
      data: { sortOption: sortParams[sortOption], Cname, minPrice, maxPrice },
      success: function (response) {
        var products = response.filteredAndSortedProducts;
        updateProducts(products);
      },
      error: function (xhr, status, error) {
        console.log(error);
      },
    });
  }






</script>
